name: Terraform Apply

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'app/**'  # Add this line to trigger on app changes
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'app/**'  # Add this line to trigger on app changes
  repository_dispatch:
    types: [docker-update]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: simonjan2/employee_management_flask_test:${{ github.sha }}

    outputs:
      image_tag: ${{ github.sha }}

  terraform:
    needs: docker
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
      AWS_REGION: ${{ secrets.BACKEND_REGION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Create backend.tf
        run: |
          cat <<EOF > backend.tf
          terraform {
            backend "s3" {
              bucket = "${{ secrets.BUCKET_TF_STATE }}"
              key    = "terraform/python-master-project.tfstate"
              region = "${{ secrets.BACKEND_REGION }}"
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="app_version=${{ needs.docker.outputs.image_tag }}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'repository_dispatch')
        run: terraform apply -auto-approve tfplan

      - name: Update Launch Template
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'repository_dispatch')
        run: |
          LAUNCH_TEMPLATE_ID=$(terraform output -raw launch_template_id)
          aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --source-version '$Latest' \
            --launch-template-data '{"ImageId":"'$(terraform output -raw ami_id)'","InstanceType":"'$(terraform output -raw instance_type)'","UserData":"'$(base64 -w 0 < userdata.sh)'"}'

      - name: Start Instance Refresh
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'repository_dispatch')
        run: |
          ASG_NAME=$(terraform output -raw asg_name)
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 90}'